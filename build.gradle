buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.1.1"
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.1'

    }
}

plugins {
    id "com.coverity.ondemand" version "1.5.61"
    id "com.github.kt3k.coveralls" version "2.5.0"
    id 'idea'
}


def branch = System.getenv("RELEASE_BRANCH") ? "RELEASE" : "SNAPSHOT"
version "0.1.4-$branch"
group 'it.lisik.domain-utils'

allprojects {
    apply plugin: 'cobertura'

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.ow2.asm') {
                details.useVersion '5.1'
            }
        }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'

    cobertura {
        coverageIgnoreTrivial = true
    }

    ext {
        version = rootProject.version
    }

    artifactory {
        clientConfig.setIncludeEnvVars(true)
        contextUrl = System.getenv("ARTIFACTORY_URL") ?: "${artifactory_contextUrl}"//The base Artifactory URL if not overridden by the publisher/resolver

        publish {
            repository {
                repoKey = 'libs-snapshot-local'
                username = System.getenv("ARTIFACTORY_USER") ?: "${artifactory_user}"
                password = System.getenv("ARTIFACTORY_PASSWORD") ?: "${artifactory_password}"
                maven = true
            }

            defaults {
                publications('maven')
                publishArtifacts = true
            }
        }


        resolve {
            repository {
                repoKey = 'libs-release'
                username = System.getenv("ARTIFACTORY_USER") ?: "${artifactory_user}"
                password = System.getenv("ARTIFACTORY_PASSWORD") ?: "${artifactory_password}"
                maven = true

            }
        }
    }

    artifactoryPublish {
        dependsOn subprojects.jar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java


                artifact sourceJar {
                    classifier "sources"
                }
            }

        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    dependencies {
        testRuntime "org.slf4j:slf4j-api:1.7.10"
    }

}
def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }
cobertura {
    coverageFormats = [ 'xml', 'html' ]
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}
test.dependsOn(subprojects.test)
